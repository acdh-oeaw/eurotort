# generated by appcreator
from django.db.models import Q
from dal import autocomplete
from .models import (
    Court,
    CourtDecission,
    KeyWord,
    PartialLegalSystem,
    Person,
    YearBook,
    Tag,
)


class YearBookAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = YearBook.objects.all()

        if self.q:
            qs = qs.filter(title__icontains=self.q)
        return qs


class CourtAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Court.objects.all()

        if self.q:
            qs = qs.filter(Q(legacy_id__icontains=self.q) | Q(name__icontains=self.q))
        return qs


class CourtDecissionAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = CourtDecission.objects.all()

        if self.q:
            qs = qs.filter(Q(id__icontains=self.q) | Q(legacy_pk__icontains=self.q))
        return qs


class KeyWordAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = KeyWord.objects.all()

        if self.q:
            qs = qs.filter(Q(id__icontains=self.q) | Q(name__icontains=self.q))
        return qs


class PartialLegalSystemAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = PartialLegalSystem.objects.all()

        if self.q:
            qs = qs.filter(Q(name__icontains=self.q) | Q(id__icontains=self.q))
        return qs


class PersonAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Person.objects.all()

        if self.q:
            qs = qs.filter(
                Q(first_name__icontains=self.q) | Q(last_name__icontains=self.q)
            )
        return qs


class TagAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Tag.objects.all()

        if self.q:
            qs = qs.filter(Q(tag__icontains=self.q) | Q(id__icontains=self.q))
        return qs
