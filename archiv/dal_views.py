# generated by appcreator
from dal import autocomplete
from django.db.models import Q
from django.utils.html import format_html

from .models import Court
from .models import CourtDecission
from .models import KeyWord
from .models import PartialLegalSystem
from .models import Person
from .models import Tag
from .models import YearBook


class YearBookAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = YearBook.objects.all()

        if self.q:
            qs = qs.filter(title__icontains=self.q)
        return qs


class MonographAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = YearBook.objects.exclude(has_bibliographic_items=None)

        if self.q:
            qs = qs.filter(title__icontains=self.q)
        return qs


class ChapterAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = YearBook.objects.all()
        constraint = self.forwarded.get("year_book_title", None)
        if constraint:
            qs = qs.filter(part_of=constraint[0])
        if self.q:
            qs = qs.filter(Q(title__icontains=self.q) | Q(id__icontains=self.q))
        return qs


class CourtAC(autocomplete.Select2QuerySetView):
    def get_result_label(self, item):
        return f"{item.name} ({item.name_english}) {item.abbreviation}"

    def get_queryset(self):
        qs = Court.objects.all()
        constraint = self.forwarded.get("partial_legal_system", None)

        if constraint:
            qs = qs.filter(partial_legal_system__in=[int(x) for x in constraint])

        if self.q:
            qs = qs.filter(
                Q(name__icontains=self.q)
                | Q(name_english__icontains=self.q)
                | Q(abbreviation__startswith=self.q)
            )
        return qs


class CourtDecissionAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = CourtDecission.objects.all()

        if self.q:
            qs = qs.filter(Q(id__icontains=self.q))
        return qs


class KeyWordAC(autocomplete.Select2QuerySetView):
    def get_result_label(self, result):
        return format_html(
            '<span class="badge rounded-pill text-bg-primary ">{}</span>', result.name
        )

    def get_queryset(self):
        qs = KeyWord.objects.all()

        if self.q:
            qs = qs.filter(Q(id__icontains=self.q) | Q(name__icontains=self.q))
        return qs


class PartialLegalSystemAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = PartialLegalSystem.objects.all()

        if self.q:
            qs = qs.filter(Q(name__icontains=self.q) | Q(id__icontains=self.q))
        return qs


class PersonAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Person.objects.all()
        constraint = self.forwarded.get("partial_legal_system", None)
        if constraint:
            qs = qs.filter(legal_system__in=[int(x) for x in constraint])
        if self.q:
            qs = qs.filter(
                Q(first_name__icontains=self.q) | Q(last_name__icontains=self.q)
            )
        return qs


class TagAC(autocomplete.Select2QuerySetView):
    def get_queryset(self):
        qs = Tag.objects.all()

        if self.q:
            qs = qs.filter(Q(tag__icontains=self.q) | Q(id__icontains=self.q))
        return qs
